0
input_words: ['CLS', 'What', 'are', 'the', 'carriers', 'of', 'devices', 'that', 'are', 'in', 'stock', 'in', 'more', 'than', 'a', 'single', 'shop', '?', 'CLS', '*', 'text', 'CLS', 'device', 'id', 'number', 'CLS', 'device', 'text', 'CLS', 'carrier', 'text', 'CLS', 'package', 'version', 'text', 'CLS', 'application', 'text', 'CLS', 'software', 'platform', 'text', 'CLS', 'shop', 'id', 'number', 'CLS', 'shop', 'name', 'text', 'CLS', 'location', 'text', 'CLS', 'open', 'date', 'text', 'CLS', 'open', 'year', 'number', 'CLS', 'shop', 'id', 'number', 'CLS', 'device', 'id', 'number', 'CLS', 'quantity', 'number', 'CLS', 'device', 'CLS', 'shop', 'CLS', 'stock
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[cond -> Gt(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> Count()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> Number(object f)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 371, 1635, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 1635, 764, 1066, 1635, 984, 1635, 1635, 1635, 1021, 239, 764, 366, 1635, 984, 1635, 1630, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
1
input_words: ['CLS', 'What', 'are', 'the', 'white', 'percentages', 'of', 'cities', ',', 'and', 'the', 'corresponding', 'crime', 'rates', 'of', 'the', 'counties', 'they', 'correspond', 'to', '?', 'CLS', '*', 'text', 'CLS', 'county', 'id', 'number', 'CLS', 'name', 'text', 'CLS', 'population', 'number', 'CLS', 'police', 'officer', 'number', 'CLS', 'resident', 'per', 'officer', 'number', 'CLS', 'case', 'burden', 'number', 'CLS', 'crime', 'rate', 'number', 'CLS', 'police', 'force', 'text', 'CLS', 'location', 'text', 'CLS', 'city', 'id', 'number', 'CLS', 'county', 'id', 'number', 'CLS', 'name', 'text', 'CLS', 'white', 'number', 'CLS', 'black', 'number', 'CLS', 'amerindian', 'number', 'CLS', 'asian', 'number', 'CLS', 'multiracial', 'number', 'CLS', 'hispanic', 'number', 'CLS', 'county', 'public', 'safety', 'CLS', 'city
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 371, 1635, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
2
input_words: ['CLS', 'Show', 'the', 'average', 'amount', 'of', 'transactions', 'for', 'different', 'lots', ',', 'ordered', 'by', 'average', 'amount', 'of', 'transactions', '.', 'CLS', '*', 'text', 'CLS', 'investor', 'id', 'number', 'CLS', 'investor', 'detail', 'text', 'CLS', 'lot', 'id', 'number', 'CLS', 'investor', 'id', 'number', 'CLS', 'lot', 'detail', 'text', 'CLS', 'transaction', 'type', 'code', 'text', 'CLS', 'transaction', 'type', 'description', 'text', 'CLS', 'transaction', 'id', 'number', 'CLS', 'investor', 'id', 'number', 'CLS', 'transaction', 'type', 'code', 'text', 'CLS', 'date', 'of', 'transaction', 'time', 'CLS', 'amount', 'of', 'transaction', 'number', 'CLS', 'share', 'count', 'text', 'CLS', 'other', 'detail', 'text', 'CLS', 'sale', 'transaction', 'id', 'number', 'CLS', 'sale', 'detail', 'text', 'CLS', 'purchase', 'transaction', 'id', 'number', 'CLS', 'purchase', 'detail', 'text', 'CLS', 'transaction', 'id', 'number', 'CLS', 'lot', 'id', 'number', 'CLS', 'investor', 'CLS', 'lot', 'CLS', 'reference', 'transaction', 'type', 'CLS', 'transaction', 'CLS', 'sale', 'CLS', 'purchase', 'CLS', 'transaction', 'lot
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> Avg()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[order_by -> order_by(order order, val_unit* val_units)]', 'ApplyRule[order -> Asc()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> Avg()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 503, 970, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 371, 1635, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 1635, 764, 1066, 1635, 984, 1635, 1635, 1132, 1164, 239, 764, 970, 1635, 984, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 216, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
3
input_words: ['CLS', 'What', 'are', 'the', 'names', 'of', 'all', 'tracks', 'that', 'belong', 'to', 'the', 'Rock', 'genre', 'and', 'whose', 'media', 'type', 'is', 'MPEG', '?', 'CLS', '*', 'text', 'CLS', 'name', 'number', 'CLS', 'seq', 'text', 'CLS', 'id', 'text', 'CLS', 'name', 'text', 'CLS', 'id', 'number', 'CLS', 'title', 'text', 'CLS', 'artist', 'id', 'number', 'CLS', 'id', 'number', 'CLS', 'last', 'name', 'text', 'CLS', 'first', 'name', 'text', 'CLS', 'title', 'text', 'CLS', 'report', 'to', 'number', 'CLS', 'birth', 'date', 'time', 'CLS', 'hire', 'date', 'time', 'CLS', 'address', 'text', 'CLS', 'city', 'text', 'CLS', 'state', 'text', 'CLS', 'country', 'text', 'CLS', 'postal', 'code', 'text', 'CLS', 'phone', 'text', 'CLS', 'fax', 'text', 'CLS', 'email', 'text', 'CLS', 'id', 'number', 'CLS', 'first', 'name', 'text', 'CLS', 'last', 'name', 'text', 'CLS', 'company', 'text', 'CLS', 'address', 'text', 'CLS', 'city', 'text', 'CLS', 'state', 'text', 'CLS', 'country', 'text', 'CLS', 'postal', 'code', 'text', 'CLS', 'phone', 'text', 'CLS', 'fax', 'text', 'CLS', 'email', 'text', 'CLS', 'support', 'rep', 'id', 'number', 'CLS', 'id', 'number', 'CLS', 'name', 'text', 'CLS', 'id', 'number', 'CLS', 'customer', 'id', 'number', 'CLS', 'invoice', 'date', 'time', 'CLS', 'billing', 'address', 'text', 'CLS', 'billing', 'city', 'text', 'CLS', 'billing', 'state', 'text', 'CLS', 'billing', 'country', 'text', 'CLS', 'bill', 'postal', 'code', 'text', 'CLS', 'total', 'number', 'CLS', 'id', 'number', 'CLS', 'name', 'text', 'CLS', 'id', 'number', 'CLS', 'name', 'text', 'CLS', 'album', 'id', 'number', 'CLS', 'medium', 'type', 'id', 'number', 'CLS', 'genre', 'id', 'number', 'CLS', 'composer', 'text', 'CLS', 'millisecond', 'number', 'CLS', 'byte', 'number', 'CLS', 'unit', 'price', 'number', 'CLS', 'id', 'number', 'CLS', 'invoice', 'id', 'number', 'CLS', 'track', 'id', 'number', 'CLS', 'unit', 'price', 'number', 'CLS', 'quantity', 'number', 'CLS', 'id', 'number', 'CLS', 'name', 'text', 'CLS', 'playlist', 'id', 'number', 'CLS', 'track', 'id', 'number', 'CLS', 'sqlite', 'sequence', 'CLS', 'artist', 'CLS', 'album', 'CLS', 'employee', 'CLS', 'customer', 'CLS', 'genre', 'CLS', 'invoice', 'CLS', 'medium', 'type', 'CLS', 'track', 'CLS', 'invoice', 'line', 'CLS', 'playlist', 'CLS', 'playlist', 'track
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> And(cond left, cond right)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> Or(cond left, cond right)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> String(string s)]', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> String(string s)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 371, 1635, 371, 1635, 1635, 138, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 971, 980, 239, 764, 1066, 1635, 984, 1635, 120, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 120, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
4
input_words: ['CLS', 'Show', 'the', 'headquarters', 'shared', 'by', 'more', 'than', 'two', 'companies', '.', 'CLS', '*', 'text', 'CLS', 'id', 'number', 'CLS', 'name', 'text', 'CLS', 'city', 'text', 'CLS', 'height', 'number', 'CLS', 'story', 'number', 'CLS', 'status', 'text', 'CLS', 'id', 'number', 'CLS', 'name', 'text', 'CLS', 'headquarter', 'text', 'CLS', 'industry', 'text', 'CLS', 'sale', 'billion', 'number', 'CLS', 'profit', 'billion', 'number', 'CLS', 'asset', 'billion', 'number', 'CLS', 'market', 'value', 'billion', 'text', 'CLS', 'build', 'id', 'number', 'CLS', 'company', 'id', 'number', 'CLS', 'move', 'in', 'year', 'number', 'CLS', 'building', 'CLS', 'company', 'CLS', 'office', 'location
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[cond -> Gt(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> Count()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> Number(object f)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>']
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1635, 764, 1066, 1635, 984, 1635, 1635, 1635, 1021, 239, 764, 366, 1635, 984, 1635, 1630, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
5
input_words: ['CLS', 'What', 'is', 'the', 'average', 'amount', 'of', 'items', 'ordered', 'in', 'each', 'order', '?', 'CLS', '*', 'text', 'CLS', 'address', 'id', 'number', 'CLS', 'address', 'content', 'text', 'CLS', 'city', 'text', 'CLS', 'zip', 'postcode', 'text', 'CLS', 'state', 'province', 'county', 'text', 'CLS', 'country', 'text', 'CLS', 'other', 'address', 'detail', 'text', 'CLS', 'product', 'id', 'number', 'CLS', 'product', 'detail', 'text', 'CLS', 'customer', 'id', 'number', 'CLS', 'payment', 'method', 'text', 'CLS', 'customer', 'name', 'text', 'CLS', 'date', 'become', 'customer', 'time', 'CLS', 'other', 'customer', 'detail', 'text', 'CLS', 'customer', 'id', 'number', 'CLS', 'address', 'id', 'number', 'CLS', 'date', 'address', 'from', 'time', 'CLS', 'address', 'type', 'text', 'CLS', 'date', 'address', 'to', 'time', 'CLS', 'customer', 'id', 'number', 'CLS', 'channel', 'code', 'text', 'CLS', 'active', 'from', 'date', 'time', 'CLS', 'active', 'to', 'date', 'time', 'CLS', 'contact', 'number', 'text', 'CLS', 'order', 'id', 'number', 'CLS', 'customer', 'id', 'number', 'CLS', 'order', 'status', 'text', 'CLS', 'order', 'date', 'time', 'CLS', 'order', 'detail', 'text', 'CLS', 'order', 'id', 'number', 'CLS', 'product', 'id', 'number', 'CLS', 'order', 'quantity', 'text', 'CLS', 'address', 'CLS', 'product', 'CLS', 'customer', 'CLS', 'customer', 'address', 'CLS', 'customer', 'contact', 'channel', 'CLS', 'customer', 'order', 'CLS', 'order', 'item
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> Avg()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 970, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 470, 1348, 980, 470, 1348, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 470, 1348, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 470, 1348, 980, 980, 980, 980, 980, 470, 1348, 980, 980, 980, 980, 980, 470, 1348, 980, 980]
6
input_words: ['CLS', 'Count', 'the', 'number', 'of', 'different', 'scientists', 'assigned', 'to', 'any', 'project', '.', 'CLS', '*', 'text', 'CLS', 'ssn', 'number', 'CLS', 'name', 'text', 'CLS', 'code', 'text', 'CLS', 'name', 'text', 'CLS', 'hour', 'number', 'CLS', 'scientist', 'number', 'CLS', 'project', 'text', 'CLS', 'scientist', 'CLS', 'project', 'CLS', 'assign', 'to
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> Count()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[True]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 366, 239, 764, 1066, 1635, 800, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
7
input_words: ['CLS', 'List', 'the', 'id', 'of', 'students', 'who', 'never', 'attends', 'courses', '?', 'CLS', '*', 'text', 'CLS', 'address', 'id', 'number', 'CLS', 'line', '1', 'text', 'CLS', 'line', '2', 'text', 'CLS', 'city', 'text', 'CLS', 'zip', 'postcode', 'text', 'CLS', 'state', 'province', 'county', 'text', 'CLS', 'country', 'text', 'CLS', 'person', 'id', 'number', 'CLS', 'first', 'name', 'text', 'CLS', 'middle', 'name', 'text', 'CLS', 'last', 'name', 'text', 'CLS', 'cell', 'mobile', 'number', 'text', 'CLS', 'email', 'address', 'text', 'CLS', 'login', 'name', 'text', 'CLS', 'password', 'text', 'CLS', 'student', 'id', 'number', 'CLS', 'student', 'detail', 'text', 'CLS', 'course', 'id', 'text', 'CLS', 'course', 'name', 'text', 'CLS', 'course', 'description', 'text', 'CLS', 'other', 'detail', 'text', 'CLS', 'person', 'address', 'id', 'number', 'CLS', 'person', 'id', 'number', 'CLS', 'address', 'id', 'number', 'CLS', 'date', 'from', 'time', 'CLS', 'date', 'to', 'time', 'CLS', 'student', 'id', 'number', 'CLS', 'course', 'id', 'number', 'CLS', 'registration', 'date', 'time', 'CLS', 'student', 'id', 'number', 'CLS', 'course', 'id', 'number', 'CLS', 'date', 'of', 'attendance', 'time', 'CLS', 'candidate', 'id', 'number', 'CLS', 'candidate', 'detail', 'text', 'CLS', 'candidate', 'id', 'number', 'CLS', 'qualification', 'text', 'CLS', 'assessment', 'date', 'time', 'CLS', 'asessment', 'outcome', 'code', 'text', 'CLS', 'address', 'CLS', 'people', 'CLS', 'student', 'CLS', 'course', 'CLS', 'people', 'address', 'CLS', 'student', 'course', 'registration', 'CLS', 'student', 'course', 'attendance', 'CLS', 'candidate', 'CLS', 'candidate', 'assessment
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[cond -> Not(cond c)]', 'ApplyRule[cond -> In(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ValSql(sql s)]', 'ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 394, 547, 239, 764, 1066, 1635, 984, 1635, 1190, 22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
8
input_words: ['CLS', 'Which', 'buildings', 'have', 'apartments', 'that', 'have', 'more', 'than', 'two', 'bathrooms', '?', 'Give', 'me', 'the', 'addresses', 'of', 'the', 'buildings', '.', 'CLS', '*', 'text', 'CLS', 'build', 'id', 'number', 'CLS', 'build', 'short', 'name', 'text', 'CLS', 'build', 'full', 'name', 'text', 'CLS', 'build', 'description', 'text', 'CLS', 'building', 'address', 'text', 'CLS', 'building', 'manager', 'text', 'CLS', 'build', 'phone', 'text', 'CLS', 'apartment', 'id', 'number', 'CLS', 'build', 'id', 'number', 'CLS', 'apartment', 'type', 'code', 'text', 'CLS', 'apartment', 'number', 'text', 'CLS', 'bathroom', 'count', 'number', 'CLS', 'bedroom', 'count', 'number', 'CLS', 'room', 'count', 'text', 'CLS', 'apartment', 'id', 'number', 'CLS', 'facility', 'code', 'text', 'CLS', 'guest', 'id', 'number', 'CLS', 'gender', 'code', 'text', 'CLS', 'guest', 'first', 'name', 'text', 'CLS', 'guest', 'last', 'name', 'text', 'CLS', 'date', 'of', 'birth', 'time', 'CLS', 'apartment', 'book', 'id', 'number', 'CLS', 'apartment', 'id', 'number', 'CLS', 'guest', 'id', 'number', 'CLS', 'book', 'status', 'code', 'text', 'CLS', 'book', 'start', 'date', 'time', 'CLS', 'book', 'end', 'date', 'time', 'CLS', 'apartment', 'id', 'number', 'CLS', 'apartment', 'book', 'id', 'number', 'CLS', 'status', 'date', 'time', 'CLS', 'available', 'yes', 'or', 'no', 'others', 'CLS', 'apartment', 'building', 'CLS', 'apartment', 'CLS', 'apartment', 'facility', 'CLS', 'guest', 'CLS', 'apartment', 'booking', 'CLS', 'view', 'unit', 'status
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> Gt(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> Number(object f)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 371, 1635, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 1021, 239, 764, 1066, 1635, 984, 1635, 1630, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
9
input_words: ['CLS', 'What', 'are', 'the', 'names', 'and', 'ids', 'of', 'stations', 'that', 'had', 'more', 'than', '14', 'bikes', 'available', 'on', 'average', 'or', 'were', 'installed', 'in', 'December', '?', 'CLS', '*', 'text', 'CLS', 'id', 'number', 'CLS', 'name', 'text', 'CLS', 'latitude', 'number', 'CLS', 'longitude', 'number', 'CLS', 'dock', 'count', 'number', 'CLS', 'city', 'text', 'CLS', 'installation', 'date', 'text', 'CLS', 'station', 'id', 'number', 'CLS', 'bike', 'available', 'number', 'CLS', 'dock', 'available', 'number', 'CLS', 'time', 'text', 'CLS', 'id', 'number', 'CLS', 'duration', 'number', 'CLS', 'start', 'date', 'text', 'CLS', 'start', 'station', 'name', 'text', 'CLS', 'start', 'station', 'id', 'number', 'CLS', 'end', 'date', 'text', 'CLS', 'end', 'station', 'name', 'text', 'CLS', 'end', 'station', 'id', 'number', 'CLS', 'bike', 'id', 'number', 'CLS', 'subscription', 'type', 'text', 'CLS', 'zip', 'code', 'number', 'CLS', 'date', 'text', 'CLS', 'max', 'temperature', 'f', 'number', 'CLS', 'mean', 'temperature', 'f', 'number', 'CLS', 'min', 'temperature', 'f', 'number', 'CLS', 'max', 'dew', 'point', 'f', 'number', 'CLS', 'mean', 'dew', 'point', 'f', 'number', 'CLS', 'min', 'dew', 'point', 'f', 'number', 'CLS', 'max', 'humidity', 'number', 'CLS', 'mean', 'humidity', 'number', 'CLS', 'min', 'humidity', 'number', 'CLS', 'max', 'sea', 'level', 'pressure', 'inch', 'number', 'CLS', 'mean', 'sea', 'level', 'pressure', 'inch', 'number', 'CLS', 'min', 'sea', 'level', 'pressure', 'inch', 'number', 'CLS', 'max', 'visibility', 'mile', 'number', 'CLS', 'mean', 'visibility', 'mile', 'number', 'CLS', 'min', 'visibility', 'mile', 'number', 'CLS', 'max', 'wind', 'speed', 'mph', 'number', 'CLS', 'mean', 'wind', 'speed', 'mph', 'number', 'CLS', 'max', 'gust', 'speed', 'mph', 'number', 'CLS', 'precipitation', 'inch', 'number', 'CLS', 'cloud', 'cover', 'number', 'CLS', 'event', 'text', 'CLS', 'wind', 'dir', 'degree', 'number', 'CLS', 'zip', 'code', 'number', 'CLS', 'station', 'CLS', 'status', 'CLS', 'trip', 'CLS', 'weather', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>']
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[cond -> Gt(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> Avg()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> Number(object f)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[cond -> Like(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> String(string s)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 371, 1635, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 1635, 764, 1066, 1635, 984, 1635, 1635, 1635, 1021, 239, 764, 970, 1635, 984, 1635, 1630, 1635, 1635, 1635, 1635, 22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1304, 239, 764, 1066, 1635, 984, 1635, 120, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 470, 1348, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
10
input_words: ['CLS', 'Find', 'the', 'number', 'of', 'followers', 'for', 'each', 'user', '.', 'CLS', '*', 'text', 'CLS', 'user', 'id', 'number', 'CLS', 'follower', 'id', 'number', 'CLS', 'id', 'number', 'CLS', 'user', 'id', 'number', 'CLS', 'text', 'text', 'CLS', 'create', 'date', 'time', 'CLS', 'uid', 'number', 'CLS', 'name', 'text', 'CLS', 'email', 'text', 'CLS', 'partition', 'id', 'number', 'CLS', 'follower', 'number', 'CLS', 'follow', 'CLS', 'tweet', 'CLS', 'user', 'profile
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> Count()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 366, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1635, 764, 1066, 1635, 984, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
11
input_words: ['CLS', 'How', 'many', 'students', 'live', 'in', 'each', 'city', '?', 'CLS', '*', 'text', 'CLS', 'allergy', 'name', 'text', 'CLS', 'allergy', 'type', 'text', 'CLS', 'stuid', 'number', 'CLS', 'allergy', 'text', 'CLS', 'stuid', 'number', 'CLS', 'last', 'name', 'text', 'CLS', 'first', 'name', 'text', 'CLS', 'age', 'number', 'CLS', 'sex', 'text', 'CLS', 'major', 'number', 'CLS', 'advisor', 'number', 'CLS', 'city', 'code', 'text', 'CLS', 'allergy', 'type', 'CLS', 'have', 'allergy', 'CLS', 'student', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>']
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> Count()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 503, 366, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1635, 764, 1066, 1635, 984, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
12
input_words: ['CLS', 'What', 'are', 'the', 'first', 'names', 'of', 'all', 'students', 'taking', 'accoutning', 'and', 'Computer', 'Information', 'Systems', 'classes', '?', 'CLS', '*', 'text', 'CLS', 'class', 'code', 'text', 'CLS', 'course', 'code', 'text', 'CLS', 'class', 'section', 'text', 'CLS', 'class', 'time', 'text', 'CLS', 'class', 'room', 'text', 'CLS', 'professor', 'employee', 'number', 'number', 'CLS', 'course', 'code', 'text', 'CLS', 'department', 'code', 'text', 'CLS', 'course', 'description', 'text', 'CLS', 'course', 'credit', 'number', 'CLS', 'department', 'code', 'text', 'CLS', 'department', 'name', 'text', 'CLS', 'school', 'code', 'text', 'CLS', 'employee', 'number', 'number', 'CLS', 'department', 'address', 'text', 'CLS', 'department', 'extension', 'text', 'CLS', 'employee', 'number', 'number', 'CLS', 'employee', 'last', 'name', 'text', 'CLS', 'employee', 'first', 'name', 'text', 'CLS', 'employee', 'initial', 'text', 'CLS', 'employee', 'job', 'code', 'text', 'CLS', 'employee', 'hire', 'date', 'time', 'CLS', 'employee', 'date', 'of', 'birth', 'time', 'CLS', 'class', 'code', 'text', 'CLS', 'student', 'number', 'number', 'CLS', 'enroll', 'grade', 'text', 'CLS', 'employee', 'number', 'number', 'CLS', 'department', 'code', 'text', 'CLS', 'professor', 'office', 'text', 'CLS', 'professor', 'extension', 'text', 'CLS', 'professor', 'high', 'degree', 'text', 'CLS', 'student', 'num', 'number', 'CLS', 'student', 'last', 'name', 'text', 'CLS', 'student', 'first', 'name', 'text', 'CLS', 'student', 'init', 'text', 'CLS', 'student', 'date', 'of', 'birth', 'time', 'CLS', 'student', 'class', 'hour', 'take', 'number', 'CLS', 'student', 'class', 'text', 'CLS', 'student', 'gpa', 'number', 'CLS', 'student', 'transfer', 'number', 'CLS', 'department', 'code', 'text', 'CLS', 'student', 'phone', 'text', 'CLS', 'professor', 'number', 'number', 'CLS', 'class', 'CLS', 'course', 'CLS', 'department', 'CLS', 'employee', 'CLS', 'enroll', 'CLS', 'professor', 'CLS', 'student
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> And(cond left, cond right)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> And(cond left, cond right)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> And(cond left, cond right)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> String(string s)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> And(cond left, cond right)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> And(cond left, cond right)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> And(cond left, cond right)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> String(string s)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce']
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 371, 1635, 371, 1635, 371, 1635, 371, 1635, 1635, 138, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 138, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 138, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 120, 1635, 1635, 1635, 1635, 1635, 22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 371, 1635, 371, 1635, 371, 1635, 371, 1635, 1635, 138, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 138, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 138, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 120, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
13
input_words: ['CLS', 'List', 'the', 'total', 'points', 'of', 'gymnasts', 'in', 'descending', 'order', '.', 'CLS', '*', 'text', 'CLS', 'gymnast', 'id', 'number', 'CLS', 'floor', 'exercise', 'point', 'number', 'CLS', 'pommel', 'horse', 'point', 'number', 'CLS', 'ring', 'point', 'number', 'CLS', 'vault', 'point', 'number', 'CLS', 'parallel', 'bar', 'point', 'number', 'CLS', 'horizontal', 'bar', 'point', 'number', 'CLS', 'total', 'point', 'number', 'CLS', 'people', 'id', 'number', 'CLS', 'name', 'text', 'CLS', 'age', 'number', 'CLS', 'height', 'number', 'CLS', 'hometown', 'text', 'CLS', 'gymnast', 'CLS', 'people
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[order_by -> order_by(order order, val_unit* val_units)]', 'ApplyRule[order -> Desc()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1635, 1635, 1132, 517, 239, 764, 1066, 1635, 984, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
14
input_words: ['CLS', 'Show', 'the', 'id', ',', 'the', 'account', 'name', ',', 'and', 'other', 'account', 'details', 'for', 'all', 'accounts', 'by', 'the', 'customer', 'with', 'first', 'name', "'Meaghan", "'", '.', 'CLS', '*', 'text', 'CLS', 'customer', 'id', 'number', 'CLS', 'customer', 'first', 'name', 'text', 'CLS', 'customer', 'middle', 'initial', 'text', 'CLS', 'customer', 'last', 'name', 'text', 'CLS', 'gender', 'text', 'CLS', 'email', 'address', 'text', 'CLS', 'login', 'name', 'text', 'CLS', 'login', 'password', 'text', 'CLS', 'phone', 'number', 'text', 'CLS', 'town', 'city', 'text', 'CLS', 'state', 'county', 'province', 'text', 'CLS', 'country', 'text', 'CLS', 'order', 'id', 'number', 'CLS', 'customer', 'id', 'number', 'CLS', 'date', 'order', 'place', 'time', 'CLS', 'order', 'detail', 'text', 'CLS', 'invoice', 'number', 'number', 'CLS', 'order', 'id', 'number', 'CLS', 'invoice', 'date', 'time', 'CLS', 'account', 'id', 'number', 'CLS', 'customer', 'id', 'number', 'CLS', 'date', 'account', 'open', 'time', 'CLS', 'account', 'name', 'text', 'CLS', 'other', 'account', 'detail', 'text', 'CLS', 'production', 'type', 'code', 'text', 'CLS', 'product', 'type', 'description', 'text', 'CLS', 'vat', 'rating', 'number', 'CLS', 'product', 'id', 'number', 'CLS', 'parent', 'product', 'id', 'number', 'CLS', 'production', 'type', 'code', 'text', 'CLS', 'unit', 'price', 'number', 'CLS', 'product', 'name', 'text', 'CLS', 'product', 'color', 'text', 'CLS', 'product', 'size', 'text', 'CLS', 'transaction', 'id', 'number', 'CLS', 'account', 'id', 'number', 'CLS', 'invoice', 'number', 'number', 'CLS', 'transaction', 'type', 'text', 'CLS', 'transaction', 'date', 'time', 'CLS', 'transaction', 'amount', 'number', 'CLS', 'transaction', 'comment', 'text', 'CLS', 'other', 'transaction', 'detail', 'text', 'CLS', 'order', 'item', 'id', 'number', 'CLS', 'order', 'id', 'number', 'CLS', 'product', 'id', 'number', 'CLS', 'product', 'quantity', 'text', 'CLS', 'other', 'order', 'item', 'detail', 'text', 'CLS', 'order', 'item', 'id', 'number', 'CLS', 'invoice', 'number', 'number', 'CLS', 'product', 'id', 'number', 'CLS', 'product', 'title', 'text', 'CLS', 'product', 'quantity', 'text', 'CLS', 'product', 'price', 'number', 'CLS', 'derive', 'product', 'cost', 'number', 'CLS', 'derive', 'vat', 'payable', 'number', 'CLS', 'derive', 'total', 'cost', 'number', 'CLS', 'customer', 'CLS', 'order', 'CLS', 'invoice', 'CLS', 'account', 'CLS', 'product', 'category', 'CLS', 'product', 'CLS', 'financial', 'transaction', 'CLS', 'order', 'item', 'CLS', 'invoice', 'line', 'item
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> String(string s)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 371, 1635, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 120, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 470, 1348, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
15
input_words: ['CLS', 'How', 'many', 'instrument', 'does', 'the', 'musician', 'with', 'last', 'name', '``', 'Heilo', "''", 'use', '?', 'CLS', '*', 'text', 'CLS', 'song', 'id', 'number', 'CLS', 'title', 'text', 'CLS', 'aid', 'number', 'CLS', 'title', 'text', 'CLS', 'year', 'number', 'CLS', 'label', 'text', 'CLS', 'type', 'text', 'CLS', 'id', 'number', 'CLS', 'first', 'name', 'text', 'CLS', 'last', 'name', 'text', 'CLS', 'song', 'id', 'number', 'CLS', 'bandmate', 'id', 'number', 'CLS', 'instrument', 'text', 'CLS', 'song', 'id', 'number', 'CLS', 'bandmate', 'number', 'CLS', 'stage', 'position', 'text', 'CLS', 'album', 'id', 'number', 'CLS', 'position', 'number', 'CLS', 'song', 'id', 'number', 'CLS', 'song', 'id', 'number', 'CLS', 'bandmate', 'number', 'CLS', 'type', 'text', 'CLS', 'song', 'CLS', 'album', 'CLS', 'band', 'CLS', 'instrument', 'CLS', 'performance', 'CLS', 'track', 'list', 'CLS', 'vocal
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> Count()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[True]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> String(string s)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 366, 239, 764, 1066, 1635, 800, 1635, 1635, 1436, 371, 1635, 371, 1635, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 120, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
16
input_words: ['CLS', 'what', 'is', 'id', 'of', 'students', 'who', 'registered', 'some', 'courses', 'but', 'the', 'least', 'number', 'of', 'courses', 'in', 'these', 'students', '?', 'CLS', '*', 'text', 'CLS', 'address', 'id', 'number', 'CLS', 'line', '1', 'text', 'CLS', 'line', '2', 'text', 'CLS', 'city', 'text', 'CLS', 'zip', 'postcode', 'text', 'CLS', 'state', 'province', 'county', 'text', 'CLS', 'country', 'text', 'CLS', 'person', 'id', 'number', 'CLS', 'first', 'name', 'text', 'CLS', 'middle', 'name', 'text', 'CLS', 'last', 'name', 'text', 'CLS', 'cell', 'mobile', 'number', 'text', 'CLS', 'email', 'address', 'text', 'CLS', 'login', 'name', 'text', 'CLS', 'password', 'text', 'CLS', 'student', 'id', 'number', 'CLS', 'student', 'detail', 'text', 'CLS', 'course', 'id', 'text', 'CLS', 'course', 'name', 'text', 'CLS', 'course', 'description', 'text', 'CLS', 'other', 'detail', 'text', 'CLS', 'person', 'address', 'id', 'number', 'CLS', 'person', 'id', 'number', 'CLS', 'address', 'id', 'number', 'CLS', 'date', 'from', 'time', 'CLS', 'date', 'to', 'time', 'CLS', 'student', 'id', 'number', 'CLS', 'course', 'id', 'number', 'CLS', 'registration', 'date', 'time', 'CLS', 'student', 'id', 'number', 'CLS', 'course', 'id', 'number', 'CLS', 'date', 'of', 'attendance', 'time', 'CLS', 'candidate', 'id', 'number', 'CLS', 'candidate', 'detail', 'text', 'CLS', 'candidate', 'id', 'number', 'CLS', 'qualification', 'text', 'CLS', 'assessment', 'date', 'time', 'CLS', 'asessment', 'outcome', 'code', 'text', 'CLS', 'address', 'CLS', 'people', 'CLS', 'student', 'CLS', 'course', 'CLS', 'people', 'address', 'CLS', 'student', 'course', 'registration', 'CLS', 'student', 'course', 'attendance', 'CLS', 'candidate', 'CLS', 'candidate', 'assessment
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[order_by -> order_by(order order, val_unit* val_units)]', 'ApplyRule[order -> Asc()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> Count()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'IntPrimitive[1]', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1635, 764, 1066, 1635, 984, 1635, 1635, 1132, 1164, 239, 764, 366, 1635, 984, 1635, 1635, 1635, 1521, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 216, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
17
input_words: ['CLS', 'What', 'is', 'the', 'document', 'type', 'description', 'for', 'document', 'type', 'named', 'Film', '?', 'CLS', '*', 'text', 'CLS', 'document', 'type', 'code', 'text', 'CLS', 'document', 'type', 'name', 'text', 'CLS', 'document', 'type', 'description', 'text', 'CLS', 'budget', 'type', 'code', 'text', 'CLS', 'budget', 'type', 'description', 'text', 'CLS', 'project', 'id', 'number', 'CLS', 'project', 'detail', 'text', 'CLS', 'document', 'id', 'number', 'CLS', 'document', 'type', 'code', 'text', 'CLS', 'project', 'id', 'number', 'CLS', 'document', 'date', 'time', 'CLS', 'document', 'name', 'text', 'CLS', 'document', 'description', 'text', 'CLS', 'other', 'detail', 'text', 'CLS', 'statement', 'id', 'number', 'CLS', 'statement', 'detail', 'text', 'CLS', 'document', 'id', 'number', 'CLS', 'budget', 'type', 'code', 'text', 'CLS', 'document', 'detail', 'text', 'CLS', 'account', 'id', 'number', 'CLS', 'statement', 'id', 'number', 'CLS', 'account', 'detail', 'text', 'CLS', 'reference', 'document', 'type', 'CLS', 'reference', 'budget', 'code', 'CLS', 'project', 'CLS', 'document', 'CLS', 'statement', 'CLS', 'document', 'with', 'expense', 'CLS', 'account
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> String(string s)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 120, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 470, 1348, 980, 980, 980]
18
input_words: ['CLS', 'How', 'many', 'students', 'are', 'there', 'for', 'each', 'major', '?', 'CLS', '*', 'text', 'CLS', 'allergy', 'name', 'text', 'CLS', 'allergy', 'type', 'text', 'CLS', 'stuid', 'number', 'CLS', 'allergy', 'text', 'CLS', 'stuid', 'number', 'CLS', 'last', 'name', 'text', 'CLS', 'first', 'name', 'text', 'CLS', 'age', 'number', 'CLS', 'sex', 'text', 'CLS', 'major', 'number', 'CLS', 'advisor', 'number', 'CLS', 'city', 'code', 'text', 'CLS', 'allergy', 'type', 'CLS', 'have', 'allergy', 'CLS', 'student
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> Count()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 503, 366, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1635, 764, 1066, 1635, 984, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 980, 470, 1348, 980, 216, 980, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
19
input_words: ['CLS', 'Which', 'advisors', 'have', 'more', 'than', 'two', 'students', '?', 'CLS', '*', 'text', 'CLS', 'student', 'id', 'number', 'CLS', 'last', 'name', 'text', 'CLS', 'first', 'name', 'text', 'CLS', 'age', 'number', 'CLS', 'sex', 'text', 'CLS', 'major', 'number', 'CLS', 'advisor', 'number', 'CLS', 'city', 'code', 'text', 'CLS', 'student', 'id', 'number', 'CLS', 'registration', 'date', 'text', 'CLS', 'election', 'cycle', 'text', 'CLS', 'president', 'vote', 'number', 'CLS', 'vice', 'president', 'vote', 'number', 'CLS', 'secretary', 'vote', 'number', 'CLS', 'treasurer', 'vote', 'number', 'CLS', 'class', 'president', 'vote', 'number', 'CLS', 'class', 'senator', 'vote', 'number', 'CLS', 'student', 'CLS', 'voting', 'record
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[cond -> Gt(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> Count()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> Number(object f)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1635, 764, 1066, 1635, 984, 1635, 1635, 1635, 1021, 239, 764, 366, 1635, 984, 1635, 1630, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
20
input_words: ['CLS', 'Which', 'clubs', 'have', 'one', 'or', 'more', 'members', 'from', 'the', 'city', 'with', 'code', '``', 'HOU', "''", '?', 'Give', 'me', 'the', 'names', 'of', 'the', 'clubs', '.', 'CLS', '*', 'text', 'CLS', 'student', 'id', 'number', 'CLS', 'last', 'name', 'text', 'CLS', 'first', 'name', 'text', 'CLS', 'age', 'number', 'CLS', 'sex', 'text', 'CLS', 'major', 'number', 'CLS', 'advisor', 'number', 'CLS', 'city', 'code', 'text', 'CLS', 'club', 'id', 'number', 'CLS', 'club', 'name', 'text', 'CLS', 'club', 'description', 'text', 'CLS', 'club', 'location', 'text', 'CLS', 'student', 'id', 'number', 'CLS', 'club', 'id', 'number', 'CLS', 'position', 'text', 'CLS', 'student', 'CLS', 'club', 'CLS', 'member', 'of', 'club
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[True]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> And(cond left, cond right)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> String(string s)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 800, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 371, 1635, 371, 1635, 1635, 138, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 120, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
21
input_words: ['CLS', 'What', 'is', 'the', 'average', 'fee', 'for', 'a', 'CSU', 'campus', 'in', 'the', 'year', 'of', '1996', '?', 'CLS', '*', 'text', 'CLS', 'id', 'number', 'CLS', 'campus', 'text', 'CLS', 'location', 'text', 'CLS', 'county', 'text', 'CLS', 'year', 'number', 'CLS', 'campus', 'number', 'CLS', 'year', 'number', 'CLS', 'campus', 'fee', 'number', 'CLS', 'year', 'number', 'CLS', 'campus', 'number', 'CLS', 'degree', 'number', 'CLS', 'campus', 'number', 'CLS', 'discipline', 'number', 'CLS', 'year', 'number', 'CLS', 'undergraduate', 'number', 'CLS', 'graduate', 'number', 'CLS', 'campus', 'number', 'CLS', 'year', 'number', 'CLS', 'totalenrollment', 'ay', 'number', 'CLS', 'fte', 'ay', 'number', 'CLS', 'campus', 'number', 'CLS', 'year', 'number', 'CLS', 'faculty', 'number', 'CLS', 'campus', 'CLS', 'csu', 'fee', 'CLS', 'degree', 'CLS', 'discipline', 'enrollment', 'CLS', 'enrollment', 'CLS', 'faculty
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> Avg()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> Number(object f)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 970, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 1635, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1630, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
22
input_words: ['CLS', 'Find', 'the', 'number', 'of', 'distinct', 'students', 'enrolled', 'in', 'courses', '.', 'CLS', '*', 'text', 'CLS', 'author', 'id', 'number', 'CLS', 'author', 'tutor', 'atb', 'text', 'CLS', 'login', 'name', 'text', 'CLS', 'password', 'text', 'CLS', 'personal', 'name', 'text', 'CLS', 'middle', 'name', 'text', 'CLS', 'family', 'name', 'text', 'CLS', 'gender', 'mf', 'text', 'CLS', 'address', 'line', '1', 'text', 'CLS', 'student', 'id', 'number', 'CLS', 'date', 'of', 'registration', 'time', 'CLS', 'date', 'of', 'late', 'logon', 'time', 'CLS', 'login', 'name', 'text', 'CLS', 'password', 'text', 'CLS', 'personal', 'name', 'text', 'CLS', 'middle', 'name', 'text', 'CLS', 'family', 'name', 'text', 'CLS', 'subject', 'id', 'number', 'CLS', 'subject', 'name', 'text', 'CLS', 'course', 'id', 'number', 'CLS', 'author', 'id', 'number', 'CLS', 'subject', 'id', 'number', 'CLS', 'course', 'name', 'text', 'CLS', 'course', 'description', 'text', 'CLS', 'registration', 'id', 'number', 'CLS', 'student', 'id', 'number', 'CLS', 'course', 'id', 'number', 'CLS', 'date', 'of', 'enrolment', 'time', 'CLS', 'date', 'of', 'completion', 'time', 'CLS', 'registration', 'id', 'number', 'CLS', 'date', 'test', 'take', 'time', 'CLS', 'test', 'result', 'text', 'CLS', 'course', 'author', 'and', 'tutor', 'CLS', 'student', 'CLS', 'subject', 'CLS', 'course', 'CLS', 'student', 'course', 'enrolment', 'CLS', 'student', 'test', 'take', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>', '<PAD>']
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> Count()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[True]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 366, 239, 764, 1066, 1635, 800, 1635, 1635, 1436, 371, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 470, 1348, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
23
input_words: ['CLS', 'Among', 'those', 'engineers', 'who', 'have', 'visited', ',', 'which', 'engineer', 'makes', 'the', 'least', 'number', 'of', 'visits', '?', 'List', 'the', 'engineer', 'id', ',', 'first', 'name', 'and', 'last', 'name', '.', 'CLS', '*', 'text', 'CLS', 'company', 'id', 'number', 'CLS', 'company', 'type', 'text', 'CLS', 'company', 'name', 'text', 'CLS', 'company', 'address', 'text', 'CLS', 'other', 'company', 'detail', 'text', 'CLS', 'maintenance', 'contract', 'id', 'number', 'CLS', 'maintenance', 'contract', 'company', 'id', 'number', 'CLS', 'contract', 'start', 'date', 'time', 'CLS', 'contract', 'end', 'date', 'time', 'CLS', 'other', 'contract', 'detail', 'text', 'CLS', 'part', 'id', 'number', 'CLS', 'part', 'name', 'text', 'CLS', 'chargeable', 'yn', 'text', 'CLS', 'chargeable', 'amount', 'text', 'CLS', 'other', 'part', 'detail', 'text', 'CLS', 'skill', 'id', 'number', 'CLS', 'skill', 'code', 'text', 'CLS', 'skill', 'description', 'text', 'CLS', 'staff', 'id', 'number', 'CLS', 'staff', 'name', 'text', 'CLS', 'gender', 'text', 'CLS', 'other', 'staff', 'detail', 'text', 'CLS', 'asset', 'id', 'number', 'CLS', 'maintenance', 'contract', 'id', 'number', 'CLS', 'supplier', 'company', 'id', 'number', 'CLS', 'asset', 'detail', 'text', 'CLS', 'asset', 'make', 'text', 'CLS', 'asset', 'model', 'text', 'CLS', 'asset', 'acquire', 'date', 'time', 'CLS', 'asset', 'dispose', 'date', 'time', 'CLS', 'other', 'asset', 'detail', 'text', 'CLS', 'asset', 'id', 'number', 'CLS', 'part', 'id', 'number', 'CLS', 'engineer', 'id', 'number', 'CLS', 'company', 'id', 'number', 'CLS', 'first', 'name', 'text', 'CLS', 'last', 'name', 'text', 'CLS', 'other', 'detail', 'text', 'CLS', 'engineer', 'id', 'number', 'CLS', 'skill', 'id', 'number', 'CLS', 'fault', 'log', 'entry', 'id', 'number', 'CLS', 'asset', 'id', 'number', 'CLS', 'record', 'by', 'staff', 'id', 'number', 'CLS', 'fault', 'log', 'entry', 'datetime', 'time', 'CLS', 'fault', 'description', 'text', 'CLS', 'other', 'fault', 'detail', 'text', 'CLS', 'engineer', 'visit', 'id', 'number', 'CLS', 'contact', 'staff', 'id', 'number', 'CLS', 'engineer', 'id', 'number', 'CLS', 'fault', 'log', 'entry', 'id', 'number', 'CLS', 'fault', 'status', 'text', 'CLS', 'visit', 'start', 'datetime', 'time', 'CLS', 'visit', 'end', 'datetime', 'time', 'CLS', 'other', 'visit', 'detail', 'text', 'CLS', 'part', 'fault', 'id', 'number', 'CLS', 'part', 'id', 'number', 'CLS', 'fault', 'short', 'name', 'text', 'CLS', 'fault', 'description', 'text', 'CLS', 'other', 'fault', 'detail', 'text', 'CLS', 'fault', 'log', 'entry', 'id', 'number', 'CLS', 'part', 'fault', 'id', 'number', 'CLS', 'fault', 'status', 'text', 'CLS', 'part', 'fault', 'id', 'number', 'CLS', 'skill', 'id', 'number', 'CLS', 'third', 'party', 'company', 'CLS', 'maintenance', 'contract', 'CLS', 'part', 'CLS', 'skill', 'CLS', 'staff', 'CLS', 'asset', 'CLS', 'asset', 'part', 'CLS', 'maintenance', 'engineer', 'CLS', 'engineer', 'skill', 'CLS', 'fault', 'log', 'CLS', 'engineer', 'visit', 'CLS', 'part', 'fault', 'CLS', 'fault', 'log', 'part', 'CLS', 'skill', 'require', 'to', 'fix
target_words: ['ApplyRule[sql -> sql(select select, from from, cond? where, col_unit* group_by, order_by? order_by, cond? having, int? limit, sql? intersect, sql? except, sql? union)]', 'ApplyRule[select -> select(singleton is_distinct, agg* aggs)]', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[agg -> agg(agg_type agg_id, val_unit val_unit)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[from -> from(table_unit* table_units, cond? conds)]', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'ApplyRule[table_unit -> Table(table table_id)]', 'Reduce', 'Reduce', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'ApplyRule[val -> ColUnit(col_unit c)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> NoneAggOp()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'ApplyRule[order_by -> order_by(order order, val_unit* val_units)]', 'ApplyRule[order -> Asc()]', 'ApplyRule[val_unit -> Column(col_unit col_unit1)]', 'ApplyRule[col_unit -> col_unit(agg_type agg_id, column col_id, singleton is_distinct)]', 'ApplyRule[agg_type -> Count()]', 'Reduce', 'SingletonPrimitive[False]', 'Reduce', 'Reduce', 'Reduce', 'IntPrimitive[1]', 'Reduce', 'Reduce', 'Reduce
target_tokens: [22, 530, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 503, 1066, 239, 764, 1066, 1635, 984, 1635, 1635, 1436, 371, 1635, 371, 1635, 1635, 980, 239, 764, 1066, 1635, 984, 1635, 1250, 764, 1066, 1635, 984, 1635, 1635, 764, 1066, 1635, 984, 1635, 1635, 1132, 1164, 239, 764, 366, 1635, 984, 1635, 1635, 1635, 1521, 1635, 1635, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
predicted_words: ['ObjectPrimitive[94002]', 'ObjectPrimitive[2004]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[5]', 'StringPrimitive["Walter]', 'StringPrimitive[[\'festival"\']]', 'StringPrimitive["film]', 'StringPrimitive["Walter]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'StringPrimitive["Internet]', 'StringPrimitive["Mountain]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ObjectPrimitive[2002]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]', 'ApplyRule[cond -> Eq(val_unit val_unit, val val1)]']
predicted_tokens: [456, 355, 216, 980, 470, 1348, 1102, 991, 1348, 980, 216, 980, 216, 980, 1619, 1284, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 216, 980, 216, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980]
